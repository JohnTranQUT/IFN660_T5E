#include "RuntimeLib.h"
void main() {
	auto LE1 = NewGlobalEnvironment(new ObjectType(), new ObjectType());
	auto R1 = new StringType("z");
	auto R2 = LE1->_getEnvRec()->CreateMutableBinding(R1, new BooleanType(false));
	auto R3 = new NumberType(42);
	auto R4 = new StringType("x");
	auto R5 = ResolveBinding(R4, LE1);
	auto R6 = SimpleAssignmentOperator(R5, R3);
	auto R7 = new NumberType(1);
	auto R8 = new StringType("x");
	auto R9 = ResolveBinding(R8, LE1);
	auto R10 = AdditionOperator(R9, R7);
	auto R11 = new StringType("y");
	auto R12 = ResolveBinding(R11, LE1);
	auto R13 = SimpleAssignmentOperator(R12, R10);
	auto R14 = new StringType("z");
	auto R15 = ResolveBinding(R14, LE1);
	auto R16 = InitializeReferencedBinding(R15, new UndefinedType());
	auto R17 = new BooleanType(false);
	auto R18 = new StringType("y");
	auto R19 = ResolveBinding(R18, LE1);
	auto R20 = UnaryMINUSOperator(R19);
	auto R21 = new StringType("x");
	auto R22 = ResolveBinding(R21, LE1);
	auto R23 = GreaterThanOperator(R22, R20);
	auto R24 = new StringType("z");
	auto R25 = ResolveBinding(R24, LE1);
	auto R26 = LogicalNOTOperator(R25);
	auto R27 = LogicalANDOperator(R26, R23);
	auto R28 = LogicalOROperator(R27, R17);
	auto R29 = ToBoolean(_ToLanguageType(GetValue(R28)));
	if (R29->_getValue()) {
		auto LE2 = NewDeclarativeEnvironment(LE1);
		auto R30 = new StringType("x");
		auto R31 = LE2->_getEnvRec()->CreateMutableBinding(R30, new BooleanType(false));
		auto R32 = new NumberType(0);
		auto R33 = new StringType("x");
		auto R34 = ResolveBinding(R33, LE2);
		auto R35 = InitializeReferencedBinding(R34, R32);
		auto R36 = new NullType();
		auto R37 = new StringType("x");
		auto R38 = ResolveBinding(R37, LE2);
		auto R39 = PrefixIncrementOperator(R38);
		auto R40 = LogicalOROperator(R39, R36);
		auto R41 = new StringType("y");
		auto R42 = ResolveBinding(R41, LE2);
		auto R43 = SimpleAssignmentOperator(R42, R40);
		auto R44 = new StringType("y");
		auto R45 = ResolveBinding(R44, LE2);
		auto R46 = PostfixDecrementOperator(R45);
		auto R47 = ToBoolean(_ToLanguageType(GetValue(R46)));
		if (R47->_getValue()) {
			auto LE3 = NewDeclarativeEnvironment(LE2);
			auto R48 = new StringType("x");
			auto R49 = LE3->_getEnvRec()->CreateMutableBinding(R48, new BooleanType(false));
			auto R50 = new StringType("y");
			auto R51 = LE3->_getEnvRec()->CreateMutableBinding(R50, new BooleanType(false));
			auto R52 = new StringType("660");
			auto R53 = new StringType("x");
			auto R54 = ResolveBinding(R53, LE3);
			auto R55 = InitializeReferencedBinding(R54, R52);
			auto R56 = new StringType("IFN");
			auto R57 = new StringType("y");
			auto R58 = ResolveBinding(R57, LE3);
			auto R59 = InitializeReferencedBinding(R58, R56);
			auto R60 = new StringType("x");
			auto R61 = ResolveBinding(R60, LE3);
			auto R62 = new StringType("y");
			auto R63 = ResolveBinding(R62, LE3);
			auto R64 = CompoundAssignmentOperator(R63, "+", R61);
			auto R65 = new StringType("Layer 3 - IfStatement");
			auto R66 = _log(R65);
			auto R67 = new StringType("x");
			auto R68 = ResolveBinding(R67, LE3);
			auto R69 = _log(R68);
			auto R70 = new StringType("y");
			auto R71 = ResolveBinding(R70, LE3);
			auto R72 = _log(R71);
		} else {
			auto LE4 = NewDeclarativeEnvironment(LE2);
			auto R73 = new StringType("y");
			auto R74 = LE4->_getEnvRec()->CreateMutableBinding(R73, new BooleanType(false));
			auto R75 = new NumberType(43);
			auto R76 = new StringType("y");
			auto R77 = ResolveBinding(R76, LE4);
			auto R78 = InitializeReferencedBinding(R77, R75);
			auto R79 = new StringType("Layer 3 - ElseStatement");
			auto R80 = _log(R79);
			auto R81 = new StringType("x");
			auto R82 = ResolveBinding(R81, LE4);
			auto R83 = _log(R82);
			auto R84 = new StringType("y");
			auto R85 = ResolveBinding(R84, LE4);
			auto R86 = _log(R85);
		}
		auto R87 = new StringType("Layer 2");
		auto R88 = _log(R87);
		auto R89 = new StringType("x");
		auto R90 = ResolveBinding(R89, LE2);
		auto R91 = _log(R90);
		auto R92 = new StringType("y");
		auto R93 = ResolveBinding(R92, LE2);
		auto R94 = _log(R93);
	}
	auto R95 = new StringType("Root");
	auto R96 = _log(R95);
	auto R97 = new StringType("x");
	auto R98 = ResolveBinding(R97, LE1);
	auto R99 = _log(R98);
	auto R100 = new StringType("y");
	auto R101 = ResolveBinding(R100, LE1);
	auto R102 = _log(R101);
}
